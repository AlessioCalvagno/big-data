{
  "paragraphs": [
    {
      "text": "%md\n## Analisi di 28 milioni recensioni di film\n\nIn questo notebook utilizzeremo Spark con il modulo SparkSQL ed un Dataframe per analizzare oltre 28 milioni di recensioni di film. Nello specifico le domande alla quale cerchermo di dare una risposta sono le seguenti:\n\n1. Quante recensioni ci sono esattamente nel dataset ?\n2. Qual è il numero di recensioni medie per utente ?\n3. Quale utente ha scritto più recensioni ? Quante sono le recensioni che ha scritto ? Qual è il suo voto medio ?\n4. Quali sono i 10 film che hanno ricevuto più recensioni ?\n5. Quali sono i 10 film con le recensioni più positive ?\n6. Quali sono i 10 film con le recensioni più negative ?\n7. Quali sono le 10 recensioni più recenti ?\n8. Qual è il film più visto per anno ?\n9. BONUS Aggiungi titolo e genere alla lista dei film più visti per anno e salva il risultato in un film csv",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:22:29.597",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eAnalisi di 28 milioni recensioni di film\u003c/h2\u003e\n\u003cp\u003eIn questo notebook utilizzeremo Spark con il modulo SparkSQL ed un Dataframe per analizzare oltre 28 milioni di recensioni di film. Nello specifico le domande alla quale cerchermo di dare una risposta sono le seguenti:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eQuante recensioni ci sono esattamente nel dataset ?\u003c/li\u003e\n\u003cli\u003eQual è il numero di recensioni medie per utente ?\u003c/li\u003e\n\u003cli\u003eQuale utente ha scritto più recensioni ? Quante sono le recensioni che ha scritto ? Qual è il suo voto medio ?\u003c/li\u003e\n\u003cli\u003eQuali sono i 10 film che hanno ricevuto più recensioni ?\u003c/li\u003e\n\u003cli\u003eQuali sono i 10 film con le recensioni più positive ?\u003c/li\u003e\n\u003cli\u003eQuali sono i 10 film con le recensioni più negative ?\u003c/li\u003e\n\u003cli\u003eQuali sono le 10 recensioni più recenti ?\u003c/li\u003e\n\u003cli\u003eQual è il film più visto per anno ?\u003c/li\u003e\n\u003cli\u003eBONUS Aggiungi titolo e genere alla lista dei film più visti per anno e salva il risultato in un film csv\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738190622404_1767077484",
      "id": "paragraph_1738190622404_1767077484",
      "dateCreated": "2025-01-29 22:43:42.404",
      "dateStarted": "2025-01-30 18:22:29.623",
      "dateFinished": "2025-01-30 18:22:31.927",
      "status": "FINISHED"
    },
    {
      "text": "%sh\nls /data/ml-latest",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:22:32.024",
      "progress": 0,
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/sh"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "genome-scores.csv\ngenome-tags.csv\nlinks.csv\nmovies.csv\nratings.csv\nREADME.txt\ntags.csv\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738232517320_2085692049",
      "id": "paragraph_1738232517320_2085692049",
      "dateCreated": "2025-01-30 10:21:57.320",
      "dateStarted": "2025-01-30 18:22:32.049",
      "dateFinished": "2025-01-30 18:22:34.300",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nfrom pyspark.sql.types import StructType, StructField, IntegerType, FloatType\n#versione 1\n#df \u003d spark.read.csv(\"/data/ml-latest/ratings.csv\", header\u003dTrue, schema \u003d\"userId INT, movieId INT, rating FLOAT, timestamp INT\")\n\n#versione 2\ndf \u003d spark.read.csv(\"/data/ml-latest/ratings.csv\", header\u003dTrue, schema \u003d StructType([\n    StructField(\"userId\", IntegerType(),True),\n    StructField(\"movieId\", IntegerType(), True),\n    StructField(\"rating\",FloatType(), True),\n    StructField(\"timestamp\", IntegerType(), True)]))\n\ndf.show(5)",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:22:34.351",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+------+-------+------+----------+\n|userId|movieId|rating| timestamp|\n+------+-------+------+----------+\n|     1|      1|   4.0|1225734739|\n|     1|    110|   4.0|1225865086|\n|     1|    158|   4.0|1225733503|\n|     1|    260|   4.5|1225735204|\n|     1|    356|   5.0|1225735119|\n+------+-------+------+----------+\nonly showing top 5 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d0"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738235660631_1265355831",
      "id": "paragraph_1738235660631_1265355831",
      "dateCreated": "2025-01-30 11:14:20.631",
      "dateStarted": "2025-01-30 18:22:34.374",
      "dateFinished": "2025-01-30 18:22:52.011",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n#check\ndf.printSchema()",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:22:52.020",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- userId: integer (nullable \u003d true)\n |-- movieId: integer (nullable \u003d true)\n |-- rating: float (nullable \u003d true)\n |-- timestamp: integer (nullable \u003d true)\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738237257718_1011513955",
      "id": "paragraph_1738237257718_1011513955",
      "dateCreated": "2025-01-30 11:40:57.719",
      "dateStarted": "2025-01-30 18:22:52.060",
      "dateFinished": "2025-01-30 18:22:52.299",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\ndf.createOrReplaceTempView(\"ratings\")",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:22:52.360",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738236664795_782075925",
      "id": "paragraph_1738236664795_782075925",
      "dateCreated": "2025-01-30 11:31:04.795",
      "dateStarted": "2025-01-30 18:22:52.397",
      "dateFinished": "2025-01-30 18:22:52.634",
      "status": "FINISHED"
    },
    {
      "text": "%md\n## Quante recensioni ci sono esattamente nel dataset ?\nI due paragrafi sotto fanno la stessa cosa, ma uno con l\u0027oggetto di pyspark (dot notation), e l\u0027altra con query sql. \nQuesto è possibile poichè il dataframe è stato registrato come tabella sql con `df.createOrReplaceTempView(\"ratings\") `.\nUsando poi l\u0027interprete sql si può interrogare la tabella come si farebbe normalmente in sql. \n\nNOTA: le query sql possono essere lanciate anche con interprete pyspark con: `spark.sql(\"QUERY SQL\") `; questo ritorna un altro dataframe.\nes: per vedere il risultato della query al volo si può fare `spark.sql(\"QUERY SQL\").show() `",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:22:52.696",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eQuante recensioni ci sono esattamente nel dataset ?\u003c/h2\u003e\n\u003cp\u003eI due paragrafi sotto fanno la stessa cosa, ma uno con l\u0026rsquo;oggetto di pyspark (dot notation), e l\u0026rsquo;altra con query sql.\u003cbr /\u003e\nQuesto è possibile poichè il dataframe è stato registrato come tabella sql con \u003ccode\u003edf.createOrReplaceTempView(\u0026quot;ratings\u0026quot;)\u003c/code\u003e.\u003cbr /\u003e\nUsando poi l\u0026rsquo;interprete sql si può interrogare la tabella come si farebbe normalmente in sql.\u003c/p\u003e\n\u003cp\u003eNOTA: le query sql possono essere lanciate anche con interprete pyspark con: \u003ccode\u003espark.sql(\u0026quot;QUERY SQL\u0026quot;)\u003c/code\u003e; questo ritorna un altro dataframe.\u003cbr /\u003e\nes: per vedere il risultato della query al volo si può fare \u003ccode\u003espark.sql(\u0026quot;QUERY SQL\u0026quot;).show()\u003c/code\u003e\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738236766604_1861544098",
      "id": "paragraph_1738236766604_1861544098",
      "dateCreated": "2025-01-30 11:32:46.604",
      "dateStarted": "2025-01-30 18:22:52.727",
      "dateFinished": "2025-01-30 18:22:52.746",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\ndf.count()",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:22:52.827",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "33832162"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d1"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d2"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738236272515_887994813",
      "id": "paragraph_1738236272515_887994813",
      "dateCreated": "2025-01-30 11:24:32.515",
      "dateStarted": "2025-01-30 18:22:52.850",
      "dateFinished": "2025-01-30 18:23:05.246",
      "status": "FINISHED"
    },
    {
      "text": "%sql\nSELECT COUNT(*) FROM ratings;",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:23:05.295",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "count(1)": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "count(1)\n33832162\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d3"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d4"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738236726477_1045794669",
      "id": "paragraph_1738236726477_1045794669",
      "dateCreated": "2025-01-30 11:32:06.477",
      "dateStarted": "2025-01-30 18:23:05.320",
      "dateFinished": "2025-01-30 18:23:13.058",
      "status": "FINISHED"
    },
    {
      "text": "%md\n## Qual è il numero di recensioni medie per utente ?\n\nIn sostanza si chiede num tot recensioni/num tot utenti\n",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:23:13.136",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eQual è il numero di recensioni medie per utente ?\u003c/h2\u003e\n\u003cp\u003eIn sostanza si chiede num tot recensioni/num tot utenti\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738236502592_187905664",
      "id": "paragraph_1738236502592_187905664",
      "dateCreated": "2025-01-30 11:28:22.592",
      "dateStarted": "2025-01-30 18:23:13.162",
      "dateFinished": "2025-01-30 18:23:13.172",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n# il totale delle recensioni è il count di tutti i record nel dataframe\ntot_ratings \u003d df.count()\nprint(tot_ratings)\n\n# il totale degli utenti si può ottenere con query sql come \"SELECT COUNT(DISTINCT userId) FROM ratings\"\n\ntot_users \u003d spark.sql(\"SELECT COUNT(DISTINCT userId) AS totale FROM ratings\").head()[\"totale\"]\n\nprint(tot_users)\n\navg_rating \u003d tot_ratings/tot_users\n\nprint(f\"Average ratings: {avg_rating}\")",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:23:13.261",
      "progress": 0,
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "33832162\n330975\nAverage ratings: 102.21969030893572\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d5"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d6"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d7"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d8"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d9"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738236502308_1310288598",
      "id": "paragraph_1738236502308_1310288598",
      "dateCreated": "2025-01-30 11:28:22.308",
      "dateStarted": "2025-01-30 18:23:13.284",
      "dateFinished": "2025-01-30 18:23:39.264",
      "status": "FINISHED"
    },
    {
      "text": "%md\n## Quale utente ha scritto più recensioni ? Quante sono le recensioni che ha scritto ? Qual è il suo voto medio ?\n\nfare un group by userId e contare il numero di record per ogni utente -\u003e ordinare secondo il conteggio -\u003e prendere il primo (o ultimo) record/id",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:23:39.294",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eQuale utente ha scritto più recensioni ? Quante sono le recensioni che ha scritto ? Qual è il suo voto medio ?\u003c/h2\u003e\n\u003cp\u003efare un group by userId e contare il numero di record per ogni utente -\u0026gt; ordinare secondo il conteggio -\u0026gt; prendere il primo (o ultimo) record/id\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738246918409_1993652626",
      "id": "paragraph_1738246918409_1993652626",
      "dateCreated": "2025-01-30 14:21:58.409",
      "dateStarted": "2025-01-30 18:23:39.316",
      "dateFinished": "2025-01-30 18:23:39.336",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n# top_user \u003d df.orderBy(\"total\",ascening\u003dFalse)\ndf_sorted_tot_ratings \u003d spark.sql(\"SELECT userId, COUNT(*) as total FROM ratings GROUP BY userId ORDER BY total DESC\")\n#check\ndf_sorted_tot_ratings.show(10)\n\nbest_user, total_ratings_best \u003d df_sorted_tot_ratings.head()\n\nprint(best_user)\nprint(total_ratings_best)",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:23:39.415",
      "progress": 20,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+------+-----+\n|userId|total|\n+------+-----+\n|189614|33332|\n| 48766| 9554|\n|207216| 9178|\n|175998| 9016|\n| 76618| 8919|\n|230765| 7719|\n|184775| 7535|\n|236260| 7488|\n|233891| 7372|\n|214831| 7266|\n+------+-----+\nonly showing top 10 rows\n\n189614\n33332\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d10"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d11"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d12"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d13"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738246917948_1259331869",
      "id": "paragraph_1738246917948_1259331869",
      "dateCreated": "2025-01-30 14:21:57.948",
      "dateStarted": "2025-01-30 18:23:39.437",
      "dateFinished": "2025-01-30 18:24:11.079",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n#voto medio di best_user\ndf_filter \u003d spark.sql(f\"SELECT * FROM ratings WHERE userId \u003d {best_user}\")\n\navg_rating \u003d df_filter.agg({\"rating\":\"avg\"}).head()[0]\nprint(f\"Average rating for best user: {avg_rating}\")\n\n# nota: volendo l\u0027aggregazione si può mettere in coda alla query sql in unica riga (il risultato è lo stesso)\n#oppure fare tutto in sql, del tipo: SELECT AVG(rating) AS media FROM ratings WHERE userId \u003d ...",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:24:11.118",
      "progress": 85,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Average rating for best user: 3.077808112324493\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d14"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d15"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738247825000_1143730653",
      "id": "paragraph_1738247825000_1143730653",
      "dateCreated": "2025-01-30 14:37:05.000",
      "dateStarted": "2025-01-30 18:24:11.143",
      "dateFinished": "2025-01-30 18:24:24.993",
      "status": "FINISHED"
    },
    {
      "text": "%md\n## Quali sono i 10 film che hanno ricevuto più recensioni ?\nLa logica è la stessa di selezionare l\u0027utente che ha fatto più recensioni, ma qui il group by va fatto su movieId\n",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:24:25.075",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eQuali sono i 10 film che hanno ricevuto più recensioni ?\u003c/h2\u003e\n\u003cp\u003eLa logica è la stessa di selezionare l\u0026rsquo;utente che ha fatto più recensioni, ma qui il group by va fatto su movieId\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738248723018_4201849",
      "id": "paragraph_1738248723018_4201849",
      "dateCreated": "2025-01-30 14:52:03.019",
      "dateStarted": "2025-01-30 18:24:25.099",
      "dateFinished": "2025-01-30 18:24:25.110",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\ndf_movie \u003d spark.sql(\"SELECT movieId, COUNT(*) as total FROM ratings GROUP BY movieId ORDER BY total DESC LIMIT 10\")\n\ndf_movie.show()",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:24:25.198",
      "progress": 27,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------+------+\n|movieId| total|\n+-------+------+\n|    318|122296|\n|    356|113581|\n|    296|108756|\n|   2571|107056|\n|    593|101802|\n|    260| 97202|\n|   2959| 86207|\n|    527| 84232|\n|    480| 83026|\n|   1196| 80200|\n+-------+------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d16"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d17"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738246935283_1341657519",
      "id": "paragraph_1738246935283_1341657519",
      "dateCreated": "2025-01-30 14:22:15.283",
      "dateStarted": "2025-01-30 18:24:25.221",
      "dateFinished": "2025-01-30 18:24:46.660",
      "status": "FINISHED"
    },
    {
      "text": "%md\n## Quali sono i 10 film con le recensioni più positive ?\n\nBisogna fare un raggruppamento per film -\u003e per ogni film mostrare la media dei voti ricevuti -\u003e ordinare in base a questa media",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:24:46.701",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eQuali sono i 10 film con le recensioni più positive ?\u003c/h2\u003e\n\u003cp\u003eBisogna fare un raggruppamento per film -\u0026gt; per ogni film mostrare la media dei voti ricevuti -\u0026gt; ordinare in base a questa media\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738248214888_841169621",
      "id": "paragraph_1738248214888_841169621",
      "dateCreated": "2025-01-30 14:43:34.888",
      "dateStarted": "2025-01-30 18:24:46.723",
      "dateFinished": "2025-01-30 18:24:46.743",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\ndf_best_10_movies \u003d spark.sql(\"SELECT movieId, AVG(rating) AS mean_rating FROM ratings GROUP BY movieId ORDER BY mean_rating DESC LIMIT 10\")\ndf_best_10_movies.show()",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:24:46.822",
      "progress": 36,
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------+-----------+\n|movieId|mean_rating|\n+-------+-----------+\n| 279086|        5.0|\n| 136998|        5.0|\n| 245100|        5.0|\n| 137018|        5.0|\n| 225379|        5.0|\n| 267382|        5.0|\n| 157917|        5.0|\n| 177551|        5.0|\n| 145620|        5.0|\n| 225253|        5.0|\n+-------+-----------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d18"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d19"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738236274016_1151314409",
      "id": "paragraph_1738236274016_1151314409",
      "dateCreated": "2025-01-30 11:24:34.016",
      "dateStarted": "2025-01-30 18:24:46.844",
      "dateFinished": "2025-01-30 18:25:09.677",
      "status": "FINISHED"
    },
    {
      "text": "%md\n## Quali sono i 10 film con le recensioni più negative ?\n\nLo stesso di sopra, ma l\u0027ordinamento è crescente\n",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:25:09.710",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eQuali sono i 10 film con le recensioni più negative ?\u003c/h2\u003e\n\u003cp\u003eLo stesso di sopra, ma l\u0026rsquo;ordinamento è crescente\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738249173393_1739993512",
      "id": "paragraph_1738249173393_1739993512",
      "dateCreated": "2025-01-30 14:59:33.393",
      "dateStarted": "2025-01-30 18:25:09.737",
      "dateFinished": "2025-01-30 18:25:09.752",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\ndf_worst_10_movies \u003d spark.sql(\"SELECT movieId, AVG(rating) AS mean_rating FROM ratings GROUP BY movieId ORDER BY mean_rating ASC LIMIT 10\")\ndf_worst_10_movies.show()",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:25:09.837",
      "progress": 27,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------+-----------+\n|movieId|mean_rating|\n+-------+-----------+\n| 215777|        0.5|\n| 235817|        0.5|\n| 183297|        0.5|\n| 220994|        0.5|\n| 258805|        0.5|\n| 260365|        0.5|\n| 210743|        0.5|\n| 236229|        0.5|\n| 259087|        0.5|\n| 260207|        0.5|\n+-------+-----------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d20"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d21"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738249174988_1093537412",
      "id": "paragraph_1738249174988_1093537412",
      "dateCreated": "2025-01-30 14:59:34.988",
      "dateStarted": "2025-01-30 18:25:09.862",
      "dateFinished": "2025-01-30 18:25:28.295",
      "status": "FINISHED"
    },
    {
      "text": "%md\n## Quali sono le 10 recensioni più recenti ?\n\nOrdino per timestamp (discendente)\n",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:25:28.392",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eQuali sono le 10 recensioni più recenti ?\u003c/h2\u003e\n\u003cp\u003eOrdino per timestamp (discendente)\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738249585776_1070105849",
      "id": "paragraph_1738249585776_1070105849",
      "dateCreated": "2025-01-30 15:06:25.776",
      "dateStarted": "2025-01-30 18:25:28.412",
      "dateFinished": "2025-01-30 18:25:28.425",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nspark.sql(\"SELECT * FROM ratings ORDER BY timestamp DESC LIMIT 10\").show()",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:25:28.511",
      "progress": 75,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+------+-------+------+----------+\n|userId|movieId|rating| timestamp|\n+------+-------+------+----------+\n| 54638| 288265|   4.0|1689843213|\n|291554| 215173|   4.5|1689842596|\n|291554|   1201|   4.5|1689842491|\n|291554|   5282|   3.5|1689841759|\n|214831| 281864|   1.5|1689841440|\n|128536| 104879|   4.5|1689840767|\n|128536| 251014|   3.5|1689840614|\n|221500| 112015|   3.0|1689840521|\n|235699|   2115|   4.0|1689840342|\n|230896| 269256|   3.5|1689839723|\n+------+-------+------+----------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d22"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738249501789_1097762152",
      "id": "paragraph_1738249501789_1097762152",
      "dateCreated": "2025-01-30 15:05:01.789",
      "dateStarted": "2025-01-30 18:25:28.532",
      "dateFinished": "2025-01-30 18:25:51.753",
      "status": "FINISHED"
    },
    {
      "text": "%md\n## Qual è il film più visto per anno ?\nQui bisogna fare maghegi e conversioni tra timestamp e date. \n",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:25:51.783",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eQual è il film più visto per anno ?\u003c/h2\u003e\n\u003cp\u003eQui bisogna fare maghegi e conversioni tra timestamp e date.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738249501239_1041612432",
      "id": "paragraph_1738249501239_1041612432",
      "dateCreated": "2025-01-30 15:05:01.239",
      "dateStarted": "2025-01-30 18:25:51.805",
      "dateFinished": "2025-01-30 18:25:51.815",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nfrom pyspark.sql.functions import year, from_unixtime\n\ndf_with_year \u003d df.withColumn(\"date\", from_unixtime(df.timestamp)).withColumn(\"year\", year(\"date\"))\ndf_with_year.show(10)",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:25:51.904",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+------+-------+------+----------+-------------------+----+\n|userId|movieId|rating| timestamp|               date|year|\n+------+-------+------+----------+-------------------+----+\n|     1|      1|   4.0|1225734739|2008-11-03 17:52:19|2008|\n|     1|    110|   4.0|1225865086|2008-11-05 06:04:46|2008|\n|     1|    158|   4.0|1225733503|2008-11-03 17:31:43|2008|\n|     1|    260|   4.5|1225735204|2008-11-03 18:00:04|2008|\n|     1|    356|   5.0|1225735119|2008-11-03 17:58:39|2008|\n|     1|    381|   3.5|1225734105|2008-11-03 17:41:45|2008|\n|     1|    596|   4.0|1225733524|2008-11-03 17:32:04|2008|\n|     1|   1036|   5.0|1225735626|2008-11-03 18:07:06|2008|\n|     1|   1049|   3.0|1225734079|2008-11-03 17:41:19|2008|\n|     1|   1066|   4.0|1225736961|2008-11-03 18:29:21|2008|\n+------+-------+------+----------+-------------------+----+\nonly showing top 10 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d23"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738249176141_790346396",
      "id": "paragraph_1738249176141_790346396",
      "dateCreated": "2025-01-30 14:59:36.141",
      "dateStarted": "2025-01-30 18:25:51.928",
      "dateFinished": "2025-01-30 18:25:52.513",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\ndf_with_year.createOrReplaceTempView(\"ratings_w_year\")",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:25:52.528",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738250308793_1630601667",
      "id": "paragraph_1738250308793_1630601667",
      "dateCreated": "2025-01-30 15:18:28.793",
      "dateStarted": "2025-01-30 18:25:52.560",
      "dateFinished": "2025-01-30 18:25:52.784",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nspark.sql(\"SELECT year, movieId, COUNT(*) AS total_view FROM ratings_w_year GROUP BY year, movieId ORDER BY total_view DESC \").show(10)",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:25:52.860",
      "progress": 7,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+----+-------+----------+\n|year|movieId|total_view|\n+----+-------+----------+\n|1996|    592|     25760|\n|1996|    590|     24915|\n|1996|    150|     24455|\n|1996|    296|     22949|\n|1996|    380|     22926|\n|1996|    457|     21619|\n|1996|    588|     20748|\n|1996|    153|     20728|\n|1996|    344|     20509|\n|1996|    165|     19880|\n+----+-------+----------+\nonly showing top 10 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d24"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d25"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738249768189_876736993",
      "id": "paragraph_1738249768189_876736993",
      "dateCreated": "2025-01-30 15:09:28.189",
      "dateStarted": "2025-01-30 18:25:52.879",
      "dateFinished": "2025-01-30 18:26:26.370",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nfrom pyspark.sql.functions import count\n#PROVA: lo stesso di qui sopra ma con la dot notation\ndf_by_year_tmp \u003d df_with_year.groupBy(\"year\", \"movieId\").agg(count(\"*\").alias(\"total_view\")).orderBy(\"total_view\", ascending\u003dFalse)\n\ndf_by_year_tmp.show(10)",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:28:36.443",
      "progress": 46,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+----+-------+----------+\n|year|movieId|total_view|\n+----+-------+----------+\n|1996|    592|     25760|\n|1996|    590|     24915|\n|1996|    150|     24455|\n|1996|    296|     22949|\n|1996|    380|     22926|\n|1996|    457|     21619|\n|1996|    588|     20748|\n|1996|    153|     20728|\n|1996|    344|     20509|\n|1996|    165|     19880|\n+----+-------+----------+\nonly showing top 10 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d31"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d32"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738260904364_583467019",
      "id": "paragraph_1738260904364_583467019",
      "dateCreated": "2025-01-30 18:15:04.364",
      "dateStarted": "2025-01-30 18:28:36.458",
      "dateFinished": "2025-01-30 18:29:03.216",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n# per selezionare solo il film più visto per anno:\nspark.sql(\"SELECT year, movieId, COUNT(*) AS total_view FROM ratings_w_year GROUP BY year, movieId ORDER BY total_view DESC \")\\\n.groupBy(\"year\").\\\nagg({\"total_view\":\"max\"})\\\n.orderBy(\"max(total_view)\", ascending\u003dFalse).show(10)",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:26:59.846",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+----+---------------+\n|year|max(total_view)|\n+----+---------------+\n|1996|          25760|\n|2015|          12657|\n|1997|          11350|\n|2016|           8870|\n|2017|           7761|\n|2000|           7448|\n|2020|           7039|\n|2005|           6221|\n|2018|           6210|\n|2019|           5835|\n+----+---------------+\nonly showing top 10 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d28"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d29"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d30"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738250404922_1040721862",
      "id": "paragraph_1738250404922_1040721862",
      "dateCreated": "2025-01-30 15:20:04.923",
      "dateStarted": "2025-01-30 18:26:59.873",
      "dateFinished": "2025-01-30 18:27:33.155",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nfrom pyspark.sql.functions import max\n#PROVA lo stesso dell\u0027ultima cella ma con solo con dot notation\n\ndf_most_watched_old \u003d df_by_year_tmp.groupBy(\"year\").\\\nagg(max(\"total_view\").alias(\"most_watched\"))\\\n.orderBy(\"most_watched\", ascending\u003dFalse)\n\ndf_most_watched_old.show(10)",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 19:23:59.695",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+----+------------+\n|year|most_watched|\n+----+------------+\n|1996|       25760|\n|2015|       12657|\n|1997|       11350|\n|2016|        8870|\n|2017|        7761|\n|2000|        7448|\n|2020|        7039|\n|2005|        6221|\n|2018|        6210|\n|2019|        5835|\n+----+------------+\nonly showing top 10 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d76"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d77"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d78"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738261779690_1197199177",
      "id": "paragraph_1738261779690_1197199177",
      "dateCreated": "2025-01-30 18:29:39.690",
      "dateStarted": "2025-01-30 19:23:59.711",
      "dateFinished": "2025-01-30 19:24:24.092",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nfrom pyspark.sql import Window\n\n# df_by_year_tmp.where(df_by_year_tmp.total_view \u003d\u003d max(\"total_view\")).show() #questo non funziona perchè non si può mettere nel where la funz di aggregazione\n\n#si usa un workaround con la window column.\n#in pratica funziona in modo simile al max(...) con il group by di mezzo, MA non collassa le righe nel drupo finale.\n# Concettualmente fa lo stesso del max + group by, ma il risultato lo affianca ad ogni riga del gruppo cui fa parte.\n#Il risultato è che si ottengono dei duplicati nella nuova colonna, perchè le righe appartenenti allo stesso gruppo\n#avranno stesso valore della colonna creata (si fa un calcolo sulla window selezionata, es un massimo e quindi il valore è uno per tutta la window).\n\nwindow \u003d Window.partitionBy(\"year\")\n\n#per capire meglio come funziona la window column scommenta questa riga e guarda il risultato.\n#df_by_year_tmp.withColumn(\"win\", max(\"total_view\").over(window)).orderBy(\"total_view\", ascending\u003dFalse).show(10)\n\n#la window column, una volta creata, è una colonna come tutte le altre ee può essere usata dentro un where; è meglio togliere questa colonna dopo averla usata nel where,\n#in quanto sarebbe un duplicato di total_view (per come è il where qui)\ndf_most_watched \u003d df_by_year_tmp.withColumn(\"win\", max(\"total_view\").over(window)).where(\"total_view \u003d\u003d win\").orderBy(\"total_view\", ascending\u003dFalse).drop(\"win\")\n\n#in questo modo preservo l\u0027id del film più visto, oltre alle info già ottenute. Il risultato finale è un group by + movieId (che però non sarebbe entrato nel groupBy)\ndf_most_watched.show(10)\n",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 19:26:44.881",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+----+-------+----------+\n|year|movieId|total_view|\n+----+-------+----------+\n|1996|    592|     25760|\n|2015|   2571|     12657|\n|1997|    780|     11350|\n|2016|    318|      8870|\n|2017|    318|      7761|\n|2000|   1210|      7448|\n|2020|    318|      7039|\n|2005|   5952|      6221|\n|2018|    318|      6210|\n|2019|    318|      5835|\n+----+-------+----------+\nonly showing top 10 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d79"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d80"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d81"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d82"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d83"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738262655756_2086942590",
      "id": "paragraph_1738262655756_2086942590",
      "dateCreated": "2025-01-30 18:44:15.756",
      "dateStarted": "2025-01-30 19:24:58.638",
      "dateFinished": "2025-01-30 19:25:26.075",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 19:26:47.866",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738264358060_399015809",
      "id": "paragraph_1738264358060_399015809",
      "dateCreated": "2025-01-30 19:12:38.060",
      "dateStarted": "2025-01-30 19:26:47.881",
      "dateFinished": "2025-01-30 19:26:48.106",
      "status": "FINISHED"
    },
    {
      "text": "%md\n## BONUS Aggiungi titolo e genere alla lista dei film più visti per anno e salva il risultato in un film csv\nBisogna leggere il file movies.csv e fare delle join",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:32:03.383",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eBONUS Aggiungi titolo e genere alla lista dei film più visti per anno e salva il risultato in un film csv\u003c/h2\u003e\n\u003cp\u003eBisogna leggere il file movies.csv e fare delle join\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738261866626_340908351",
      "id": "paragraph_1738261866626_340908351",
      "dateCreated": "2025-01-30 18:31:06.626",
      "dateStarted": "2025-01-30 18:32:03.384",
      "dateFinished": "2025-01-30 18:32:03.395",
      "status": "FINISHED"
    },
    {
      "text": "%md\nlettura file `movies.csv`",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:32:22.767",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003elettura file \u003ccode\u003emovies.csv\u003c/code\u003e\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738261933686_110425860",
      "id": "paragraph_1738261933686_110425860",
      "dateCreated": "2025-01-30 18:32:13.686",
      "dateStarted": "2025-01-30 18:32:22.767",
      "dateFinished": "2025-01-30 18:32:22.774",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\ndf_movies \u003d spark.read.csv(\"/data/ml-latest/movies.csv\", header\u003dTrue, schema \u003d \"movieId INT, title STRING, genres STRING\")\ndf_movies.show(10)\n\ndf_movies.printSchema()",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 18:36:24.634",
      "progress": 100,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------+--------------------+--------------------+\n|movieId|               title|              genres|\n+-------+--------------------+--------------------+\n|      1|    Toy Story (1995)|Adventure|Animati...|\n|      2|      Jumanji (1995)|Adventure|Childre...|\n|      3|Grumpier Old Men ...|      Comedy|Romance|\n|      4|Waiting to Exhale...|Comedy|Drama|Romance|\n|      5|Father of the Bri...|              Comedy|\n|      6|         Heat (1995)|Action|Crime|Thri...|\n|      7|      Sabrina (1995)|      Comedy|Romance|\n|      8| Tom and Huck (1995)|  Adventure|Children|\n|      9| Sudden Death (1995)|              Action|\n|     10|    GoldenEye (1995)|Action|Adventure|...|\n+-------+--------------------+--------------------+\nonly showing top 10 rows\n\nroot\n |-- movieId: integer (nullable \u003d true)\n |-- title: string (nullable \u003d true)\n |-- genres: string (nullable \u003d true)\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d37"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738261865628_1779829605",
      "id": "paragraph_1738261865628_1779829605",
      "dateCreated": "2025-01-30 18:31:05.628",
      "dateStarted": "2025-01-30 18:36:24.651",
      "dateFinished": "2025-01-30 18:36:25.189",
      "status": "FINISHED"
    },
    {
      "text": "%md\ndevo fare una join tra `df_movies` e `df_most_watched`",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 19:27:38.741",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003edevo fare una join tra \u003ccode\u003edf_movies\u003c/code\u003e e \u003ccode\u003edf_most_watched\u003c/code\u003e\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738265218827_1612799085",
      "id": "paragraph_1738265218827_1612799085",
      "dateCreated": "2025-01-30 19:26:58.827",
      "dateStarted": "2025-01-30 19:27:38.744",
      "dateFinished": "2025-01-30 19:27:38.806",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n#default \u003d inner join\ndf_final \u003d df_most_watched.join(df_movies, on\u003d\"movieId\").select(\"title\",\"year\",\"total_view\",\"genres\").orderBy(\"total_view\", ascending\u003dFalse)",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 19:36:55.370",
      "progress": 0,
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738250406042_667191879",
      "id": "paragraph_1738250406042_667191879",
      "dateCreated": "2025-01-30 15:20:06.043",
      "dateStarted": "2025-01-30 19:35:03.988",
      "dateFinished": "2025-01-30 19:35:32.501",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\ndf_final.show(20,False)",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 19:36:49.168",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+---------------------------------------------------------+----+----------+--------------------------------+\n|title                                                    |year|total_view|genres                          |\n+---------------------------------------------------------+----+----------+--------------------------------+\n|Batman (1989)                                            |1996|25760     |Action|Crime|Thriller           |\n|Matrix, The (1999)                                       |2015|12657     |Action|Sci-Fi|Thriller          |\n|Independence Day (a.k.a. ID4) (1996)                     |1997|11350     |Action|Adventure|Sci-Fi|Thriller|\n|Shawshank Redemption, The (1994)                         |2016|8870      |Crime|Drama                     |\n|Shawshank Redemption, The (1994)                         |2017|7761      |Crime|Drama                     |\n|Star Wars: Episode VI - Return of the Jedi (1983)        |2000|7448      |Action|Adventure|Sci-Fi         |\n|Shawshank Redemption, The (1994)                         |2020|7039      |Crime|Drama                     |\n|Lord of the Rings: The Two Towers, The (2002)            |2005|6221      |Adventure|Fantasy               |\n|Shawshank Redemption, The (1994)                         |2018|6210      |Crime|Drama                     |\n|Shawshank Redemption, The (1994)                         |2019|5835      |Crime|Drama                     |\n|Shawshank Redemption, The (1994)                         |2021|4781      |Crime|Drama                     |\n|Shakespeare in Love (1998)                               |1999|4619      |Comedy|Drama|Romance            |\n|Star Wars: Episode VI - Return of the Jedi (1983)        |2001|4517      |Action|Adventure|Sci-Fi         |\n|Matrix, The (1999)                                       |2008|4192      |Action|Sci-Fi|Thriller          |\n|Lord of the Rings: The Return of the King, The (2003)    |2006|3996      |Action|Adventure|Drama|Fantasy  |\n|Avatar (2009)                                            |2010|3842      |Action|Adventure|Sci-Fi|IMAX    |\n|Dark Knight, The (2008)                                  |2009|3706      |Action|Crime|Drama|IMAX         |\n|Lord of the Rings: The Return of the King, The (2003)    |2004|3692      |Action|Adventure|Drama|Fantasy  |\n|Lord of the Rings: The Two Towers, The (2002)            |2003|3678      |Adventure|Fantasy               |\n|Lord of the Rings: The Fellowship of the Ring, The (2001)|2002|3548      |Adventure|Fantasy               |\n+---------------------------------------------------------+----+----------+--------------------------------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d97"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d99"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d100"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d101"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d102"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738265262288_558154662",
      "id": "paragraph_1738265262288_558154662",
      "dateCreated": "2025-01-30 19:27:42.288",
      "dateStarted": "2025-01-30 19:36:49.184",
      "dateFinished": "2025-01-30 19:37:17.726",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\ndf_final.count()",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 19:42:21.881",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "32"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d103"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d105"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d106"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d107"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d108"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d109"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738265809183_1485545320",
      "id": "paragraph_1738265809183_1485545320",
      "dateCreated": "2025-01-30 19:36:49.183",
      "dateStarted": "2025-01-30 19:42:21.906",
      "dateFinished": "2025-01-30 19:42:49.469",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\ndf_final.write.csv(\"/data/final_dir\")",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 19:46:45.936",
      "progress": 4,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mPy4JJavaError\u001b[0m                             Traceback (most recent call last)\nCell \u001b[0;32mIn[182], line 1\u001b[0m\n\u001b[0;32m----\u003e 1\u001b[0m \u001b[43mdf_final\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mwrite\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcsv\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m/data/final_dir\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\nFile \u001b[0;32m/zeppelin/spark/python/lib/pyspark.zip/pyspark/sql/readwriter.py:1240\u001b[0m, in \u001b[0;36mDataFrameWriter.csv\u001b[0;34m(self, path, mode, compression, sep, quote, escape, header, nullValue, escapeQuotes, quoteAll, dateFormat, timestampFormat, ignoreLeadingWhiteSpace, ignoreTrailingWhiteSpace, charToEscapeQuoteEscaping, encoding, emptyValue, lineSep)\u001b[0m\n\u001b[1;32m   1221\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmode(mode)\n\u001b[1;32m   1222\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_set_opts(\n\u001b[1;32m   1223\u001b[0m     compression\u001b[38;5;241m\u003d\u001b[39mcompression,\n\u001b[1;32m   1224\u001b[0m     sep\u001b[38;5;241m\u003d\u001b[39msep,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1238\u001b[0m     lineSep\u001b[38;5;241m\u003d\u001b[39mlineSep,\n\u001b[1;32m   1239\u001b[0m )\n\u001b[0;32m-\u003e 1240\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_jwrite\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcsv\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath\u001b[49m\u001b[43m)\u001b[49m\n\nFile \u001b[0;32m/zeppelin/spark/python/lib/py4j-0.10.9.5-src.zip/py4j/java_gateway.py:1321\u001b[0m, in \u001b[0;36mJavaMember.__call__\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m   1315\u001b[0m command \u001b[38;5;241m\u003d\u001b[39m proto\u001b[38;5;241m.\u001b[39mCALL_COMMAND_NAME \u001b[38;5;241m+\u001b[39m\\\n\u001b[1;32m   1316\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcommand_header \u001b[38;5;241m+\u001b[39m\\\n\u001b[1;32m   1317\u001b[0m     args_command \u001b[38;5;241m+\u001b[39m\\\n\u001b[1;32m   1318\u001b[0m     proto\u001b[38;5;241m.\u001b[39mEND_COMMAND_PART\n\u001b[1;32m   1320\u001b[0m answer \u001b[38;5;241m\u003d\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mgateway_client\u001b[38;5;241m.\u001b[39msend_command(command)\n\u001b[0;32m-\u003e 1321\u001b[0m return_value \u001b[38;5;241m\u003d\u001b[39m \u001b[43mget_return_value\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1322\u001b[0m \u001b[43m    \u001b[49m\u001b[43manswer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mgateway_client\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtarget_id\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mname\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1324\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m temp_arg \u001b[38;5;129;01min\u001b[39;00m temp_args:\n\u001b[1;32m   1325\u001b[0m     temp_arg\u001b[38;5;241m.\u001b[39m_detach()\n\nFile \u001b[0;32m/zeppelin/spark/python/lib/pyspark.zip/pyspark/sql/utils.py:190\u001b[0m, in \u001b[0;36mcapture_sql_exception.\u003clocals\u003e.deco\u001b[0;34m(*a, **kw)\u001b[0m\n\u001b[1;32m    188\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mdeco\u001b[39m(\u001b[38;5;241m*\u001b[39ma: Any, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkw: Any) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m\u003e\u001b[39m Any:\n\u001b[1;32m    189\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--\u003e 190\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mf\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43ma\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkw\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    191\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m Py4JJavaError \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m    192\u001b[0m         converted \u001b[38;5;241m\u003d\u001b[39m convert_exception(e\u001b[38;5;241m.\u001b[39mjava_exception)\n\nFile \u001b[0;32m/zeppelin/spark/python/lib/py4j-0.10.9.5-src.zip/py4j/protocol.py:326\u001b[0m, in \u001b[0;36mget_return_value\u001b[0;34m(answer, gateway_client, target_id, name)\u001b[0m\n\u001b[1;32m    324\u001b[0m value \u001b[38;5;241m\u003d\u001b[39m OUTPUT_CONVERTER[\u001b[38;5;28mtype\u001b[39m](answer[\u001b[38;5;241m2\u001b[39m:], gateway_client)\n\u001b[1;32m    325\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m answer[\u001b[38;5;241m1\u001b[39m] \u001b[38;5;241m\u003d\u003d\u001b[39m REFERENCE_TYPE:\n\u001b[0;32m--\u003e 326\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m Py4JJavaError(\n\u001b[1;32m    327\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAn error occurred while calling \u001b[39m\u001b[38;5;132;01m{0}\u001b[39;00m\u001b[38;5;132;01m{1}\u001b[39;00m\u001b[38;5;132;01m{2}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39m\n\u001b[1;32m    328\u001b[0m         \u001b[38;5;28mformat\u001b[39m(target_id, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m, name), value)\n\u001b[1;32m    329\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    330\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m Py4JError(\n\u001b[1;32m    331\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAn error occurred while calling \u001b[39m\u001b[38;5;132;01m{0}\u001b[39;00m\u001b[38;5;132;01m{1}\u001b[39;00m\u001b[38;5;132;01m{2}\u001b[39;00m\u001b[38;5;124m. Trace:\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;132;01m{3}\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39m\n\u001b[1;32m    332\u001b[0m         \u001b[38;5;28mformat\u001b[39m(target_id, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m, name, value))\n\n\u001b[0;31mPy4JJavaError\u001b[0m: An error occurred while calling o445.csv.\n: org.apache.spark.SparkException: Job aborted.\n\tat org.apache.spark.sql.errors.QueryExecutionErrors$.jobAbortedError(QueryExecutionErrors.scala:638)\n\tat org.apache.spark.sql.execution.datasources.FileFormatWriter$.write(FileFormatWriter.scala:278)\n\tat org.apache.spark.sql.execution.datasources.InsertIntoHadoopFsRelationCommand.run(InsertIntoHadoopFsRelationCommand.scala:186)\n\tat org.apache.spark.sql.execution.command.DataWritingCommandExec.sideEffectResult$lzycompute(commands.scala:113)\n\tat org.apache.spark.sql.execution.command.DataWritingCommandExec.sideEffectResult(commands.scala:111)\n\tat org.apache.spark.sql.execution.command.DataWritingCommandExec.executeCollect(commands.scala:125)\n\tat org.apache.spark.sql.execution.QueryExecution$$anonfun$eagerlyExecuteCommands$1.$anonfun$applyOrElse$1(QueryExecution.scala:98)\n\tat org.apache.spark.sql.execution.SQLExecution$.$anonfun$withNewExecutionId$6(SQLExecution.scala:109)\n\tat org.apache.spark.sql.execution.SQLExecution$.withSQLConfPropagated(SQLExecution.scala:169)\n\tat org.apache.spark.sql.execution.SQLExecution$.$anonfun$withNewExecutionId$1(SQLExecution.scala:95)\n\tat org.apache.spark.sql.SparkSession.withActive(SparkSession.scala:779)\n\tat org.apache.spark.sql.execution.SQLExecution$.withNewExecutionId(SQLExecution.scala:64)\n\tat org.apache.spark.sql.execution.QueryExecution$$anonfun$eagerlyExecuteCommands$1.applyOrElse(QueryExecution.scala:98)\n\tat org.apache.spark.sql.execution.QueryExecution$$anonfun$eagerlyExecuteCommands$1.applyOrElse(QueryExecution.scala:94)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.$anonfun$transformDownWithPruning$1(TreeNode.scala:584)\n\tat org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:176)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning(TreeNode.scala:584)\n\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.org$apache$spark$sql$catalyst$plans$logical$AnalysisHelper$$super$transformDownWithPruning(LogicalPlan.scala:30)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformDownWithPruning(AnalysisHelper.scala:267)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformDownWithPruning$(AnalysisHelper.scala:263)\n\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.transformDownWithPruning(LogicalPlan.scala:30)\n\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.transformDownWithPruning(LogicalPlan.scala:30)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.transformDown(TreeNode.scala:560)\n\tat org.apache.spark.sql.execution.QueryExecution.eagerlyExecuteCommands(QueryExecution.scala:94)\n\tat org.apache.spark.sql.execution.QueryExecution.commandExecuted$lzycompute(QueryExecution.scala:81)\n\tat org.apache.spark.sql.execution.QueryExecution.commandExecuted(QueryExecution.scala:79)\n\tat org.apache.spark.sql.execution.QueryExecution.assertCommandExecuted(QueryExecution.scala:116)\n\tat org.apache.spark.sql.DataFrameWriter.runCommand(DataFrameWriter.scala:860)\n\tat org.apache.spark.sql.DataFrameWriter.saveToV1Source(DataFrameWriter.scala:390)\n\tat org.apache.spark.sql.DataFrameWriter.saveInternal(DataFrameWriter.scala:363)\n\tat org.apache.spark.sql.DataFrameWriter.save(DataFrameWriter.scala:239)\n\tat org.apache.spark.sql.DataFrameWriter.csv(DataFrameWriter.scala:851)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)\n\tat py4j.Gateway.invoke(Gateway.java:282)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:238)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: java.io.IOException: Failed to rename DeprecatedRawLocalFileStatus{path\u003dfile:/data/final_dir/_temporary/0/task_202501301947133265138581991800060_0291_m_000000/part-00000-0223d37b-7180-43b9-87ad-3550319e85a4-c000.csv; isDirectory\u003dfalse; length\u003d2087; replication\u003d1; blocksize\u003d33554432; modification_time\u003d1738266431834; access_time\u003d1738266431834; owner\u003d; group\u003d; permission\u003drw-rw-rw-; isSymlink\u003dfalse; hasAcl\u003dfalse; isEncrypted\u003dfalse; isErasureCoded\u003dfalse} to file:/data/final_dir/part-00000-0223d37b-7180-43b9-87ad-3550319e85a4-c000.csv\n\tat org.apache.hadoop.mapreduce.lib.output.FileOutputCommitter.mergePaths(FileOutputCommitter.java:477)\n\tat org.apache.hadoop.mapreduce.lib.output.FileOutputCommitter.mergePaths(FileOutputCommitter.java:490)\n\tat org.apache.hadoop.mapreduce.lib.output.FileOutputCommitter.commitJobInternal(FileOutputCommitter.java:405)\n\tat org.apache.hadoop.mapreduce.lib.output.FileOutputCommitter.commitJob(FileOutputCommitter.java:377)\n\tat org.apache.spark.internal.io.HadoopMapReduceCommitProtocol.commitJob(HadoopMapReduceCommitProtocol.scala:192)\n\tat org.apache.spark.sql.execution.datasources.FileFormatWriter$.$anonfun$write$25(FileFormatWriter.scala:267)\n\tat scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)\n\tat org.apache.spark.util.Utils$.timeTakenMs(Utils.scala:642)\n\tat org.apache.spark.sql.execution.datasources.FileFormatWriter$.write(FileFormatWriter.scala:267)\n\t... 41 more\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d126"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d128"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d129"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d130"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d131"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d132"
            },
            {
              "jobUrl": "http://94038e8cde14:4040/jobs/job?id\u003d133"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738266141905_647828446",
      "id": "paragraph_1738266141905_647828446",
      "dateCreated": "2025-01-30 19:42:21.906",
      "dateStarted": "2025-01-30 19:46:45.954",
      "dateFinished": "2025-01-30 19:47:14.499",
      "status": "ERROR"
    },
    {
      "text": "%sh\ncat /data/final_dir/part* \u003e /data/final.csv",
      "user": "anonymous",
      "dateUpdated": "2025-01-30 19:46:45.021",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sh",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1738266245783_1906193767",
      "id": "paragraph_1738266245783_1906193767",
      "dateCreated": "2025-01-30 19:44:05.784",
      "status": "READY"
    }
  ],
  "name": "es10",
  "id": "2KJGSYYUT",
  "defaultInterpreterGroup": "spark",
  "version": "0.11.2",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {
    "isRunning": false
  }
}